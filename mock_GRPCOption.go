// Code generated by mockery. DO NOT EDIT.

package lit

import (
	mock "github.com/stretchr/testify/mock"
	grpc "google.golang.org/grpc"
)

// MockGRPCOption is an autogenerated mock type for the GRPCOption type
type MockGRPCOption struct {
	mock.Mock
}

type MockGRPCOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGRPCOption) EXPECT() *MockGRPCOption_Expecter {
	return &MockGRPCOption_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: option
func (_m *MockGRPCOption) Execute(option *[]grpc.ServerOption) {
	_m.Called(option)
}

// MockGRPCOption_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockGRPCOption_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - option *[]grpc.ServerOption
func (_e *MockGRPCOption_Expecter) Execute(option interface{}) *MockGRPCOption_Execute_Call {
	return &MockGRPCOption_Execute_Call{Call: _e.mock.On("Execute", option)}
}

func (_c *MockGRPCOption_Execute_Call) Run(run func(option *[]grpc.ServerOption)) *MockGRPCOption_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*[]grpc.ServerOption))
	})
	return _c
}

func (_c *MockGRPCOption_Execute_Call) Return() *MockGRPCOption_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGRPCOption_Execute_Call) RunAndReturn(run func(*[]grpc.ServerOption)) *MockGRPCOption_Execute_Call {
	_c.Run(run)
	return _c
}

// NewMockGRPCOption creates a new instance of MockGRPCOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGRPCOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGRPCOption {
	mock := &MockGRPCOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
