// Code generated by mockery v2.53.0. DO NOT EDIT.

package lit

import (
	mock "github.com/stretchr/testify/mock"
	grpc "google.golang.org/grpc"
)

// MockServiceRegistrar is an autogenerated mock type for the ServiceRegistrar type
type MockServiceRegistrar struct {
	mock.Mock
}

type MockServiceRegistrar_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceRegistrar) EXPECT() *MockServiceRegistrar_Expecter {
	return &MockServiceRegistrar_Expecter{mock: &_m.Mock}
}

// RegisterService provides a mock function with given fields: desc, impl
func (_m *MockServiceRegistrar) RegisterService(desc *grpc.ServiceDesc, impl any) {
	_m.Called(desc, impl)
}

// MockServiceRegistrar_RegisterService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterService'
type MockServiceRegistrar_RegisterService_Call struct {
	*mock.Call
}

// RegisterService is a helper method to define mock.On call
//   - desc *grpc.ServiceDesc
//   - impl any
func (_e *MockServiceRegistrar_Expecter) RegisterService(desc interface{}, impl interface{}) *MockServiceRegistrar_RegisterService_Call {
	return &MockServiceRegistrar_RegisterService_Call{Call: _e.mock.On("RegisterService", desc, impl)}
}

func (_c *MockServiceRegistrar_RegisterService_Call) Run(run func(desc *grpc.ServiceDesc, impl any)) *MockServiceRegistrar_RegisterService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*grpc.ServiceDesc), args[1].(any))
	})
	return _c
}

func (_c *MockServiceRegistrar_RegisterService_Call) Return() *MockServiceRegistrar_RegisterService_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServiceRegistrar_RegisterService_Call) RunAndReturn(run func(*grpc.ServiceDesc, any)) *MockServiceRegistrar_RegisterService_Call {
	_c.Run(run)
	return _c
}

// NewMockServiceRegistrar creates a new instance of MockServiceRegistrar. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceRegistrar(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServiceRegistrar {
	mock := &MockServiceRegistrar{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
