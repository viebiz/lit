// Code generated by mockery v2.53.0. DO NOT EDIT.

package grpcclient

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockConn is an autogenerated mock type for the Conn type
type MockConn struct {
	mock.Mock
}

type MockConn_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConn) EXPECT() *MockConn_Expecter {
	return &MockConn_Expecter{mock: &_m.Mock}
}

// Invoke provides a mock function with given fields: ctx, method, args, reply, opts
func (_m *MockConn) Invoke(ctx context.Context, method string, args any, reply any, opts ...grpc.CallOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, method, args, reply)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Invoke")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, any, any, ...grpc.CallOption) error); ok {
		r0 = rf(ctx, method, args, reply, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConn_Invoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Invoke'
type MockConn_Invoke_Call struct {
	*mock.Call
}

// Invoke is a helper method to define mock.On call
//   - ctx context.Context
//   - method string
//   - args any
//   - reply any
//   - opts ...grpc.CallOption
func (_e *MockConn_Expecter) Invoke(ctx interface{}, method interface{}, args interface{}, reply interface{}, opts ...interface{}) *MockConn_Invoke_Call {
	return &MockConn_Invoke_Call{Call: _e.mock.On("Invoke",
		append([]interface{}{ctx, method, args, reply}, opts...)...)}
}

func (_c *MockConn_Invoke_Call) Run(run func(ctx context.Context, method string, args any, reply any, opts ...grpc.CallOption)) *MockConn_Invoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(any), args[3].(any), variadicArgs...)
	})
	return _c
}

func (_c *MockConn_Invoke_Call) Return(_a0 error) *MockConn_Invoke_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConn_Invoke_Call) RunAndReturn(run func(context.Context, string, any, any, ...grpc.CallOption) error) *MockConn_Invoke_Call {
	_c.Call.Return(run)
	return _c
}

// NewStream provides a mock function with given fields: ctx, desc, method, opts
func (_m *MockConn) NewStream(ctx context.Context, desc *grpc.StreamDesc, method string, opts ...grpc.CallOption) (grpc.ClientStream, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, desc, method)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NewStream")
	}

	var r0 grpc.ClientStream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.StreamDesc, string, ...grpc.CallOption) (grpc.ClientStream, error)); ok {
		return rf(ctx, desc, method, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.StreamDesc, string, ...grpc.CallOption) grpc.ClientStream); ok {
		r0 = rf(ctx, desc, method, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.ClientStream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *grpc.StreamDesc, string, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, desc, method, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConn_NewStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewStream'
type MockConn_NewStream_Call struct {
	*mock.Call
}

// NewStream is a helper method to define mock.On call
//   - ctx context.Context
//   - desc *grpc.StreamDesc
//   - method string
//   - opts ...grpc.CallOption
func (_e *MockConn_Expecter) NewStream(ctx interface{}, desc interface{}, method interface{}, opts ...interface{}) *MockConn_NewStream_Call {
	return &MockConn_NewStream_Call{Call: _e.mock.On("NewStream",
		append([]interface{}{ctx, desc, method}, opts...)...)}
}

func (_c *MockConn_NewStream_Call) Run(run func(ctx context.Context, desc *grpc.StreamDesc, method string, opts ...grpc.CallOption)) *MockConn_NewStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*grpc.StreamDesc), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockConn_NewStream_Call) Return(_a0 grpc.ClientStream, _a1 error) *MockConn_NewStream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConn_NewStream_Call) RunAndReturn(run func(context.Context, *grpc.StreamDesc, string, ...grpc.CallOption) (grpc.ClientStream, error)) *MockConn_NewStream_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConn creates a new instance of MockConn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConn(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConn {
	mock := &MockConn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
