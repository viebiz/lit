// Code generated by mockery. DO NOT EDIT.

package mockredis

import (
	mock "github.com/stretchr/testify/mock"
	redis "github.com/viebiz/redis"
)

// MockHook is an autogenerated mock type for the Hook type
type MockHook struct {
	mock.Mock
}

type MockHook_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHook) EXPECT() *MockHook_Expecter {
	return &MockHook_Expecter{mock: &_m.Mock}
}

// DialHook provides a mock function with given fields: next
func (_m *MockHook) DialHook(next redis.DialHook) redis.DialHook {
	ret := _m.Called(next)

	if len(ret) == 0 {
		panic("no return value specified for DialHook")
	}

	var r0 redis.DialHook
	if rf, ok := ret.Get(0).(func(redis.DialHook) redis.DialHook); ok {
		r0 = rf(next)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(redis.DialHook)
		}
	}

	return r0
}

// MockHook_DialHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DialHook'
type MockHook_DialHook_Call struct {
	*mock.Call
}

// DialHook is a helper method to define mock.On call
//   - next redis.DialHook
func (_e *MockHook_Expecter) DialHook(next interface{}) *MockHook_DialHook_Call {
	return &MockHook_DialHook_Call{Call: _e.mock.On("DialHook", next)}
}

func (_c *MockHook_DialHook_Call) Run(run func(next redis.DialHook)) *MockHook_DialHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(redis.DialHook))
	})
	return _c
}

func (_c *MockHook_DialHook_Call) Return(_a0 redis.DialHook) *MockHook_DialHook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHook_DialHook_Call) RunAndReturn(run func(redis.DialHook) redis.DialHook) *MockHook_DialHook_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessHook provides a mock function with given fields: next
func (_m *MockHook) ProcessHook(next redis.ProcessHook) redis.ProcessHook {
	ret := _m.Called(next)

	if len(ret) == 0 {
		panic("no return value specified for ProcessHook")
	}

	var r0 redis.ProcessHook
	if rf, ok := ret.Get(0).(func(redis.ProcessHook) redis.ProcessHook); ok {
		r0 = rf(next)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(redis.ProcessHook)
		}
	}

	return r0
}

// MockHook_ProcessHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessHook'
type MockHook_ProcessHook_Call struct {
	*mock.Call
}

// ProcessHook is a helper method to define mock.On call
//   - next redis.ProcessHook
func (_e *MockHook_Expecter) ProcessHook(next interface{}) *MockHook_ProcessHook_Call {
	return &MockHook_ProcessHook_Call{Call: _e.mock.On("ProcessHook", next)}
}

func (_c *MockHook_ProcessHook_Call) Run(run func(next redis.ProcessHook)) *MockHook_ProcessHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(redis.ProcessHook))
	})
	return _c
}

func (_c *MockHook_ProcessHook_Call) Return(_a0 redis.ProcessHook) *MockHook_ProcessHook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHook_ProcessHook_Call) RunAndReturn(run func(redis.ProcessHook) redis.ProcessHook) *MockHook_ProcessHook_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessPipelineHook provides a mock function with given fields: next
func (_m *MockHook) ProcessPipelineHook(next redis.ProcessPipelineHook) redis.ProcessPipelineHook {
	ret := _m.Called(next)

	if len(ret) == 0 {
		panic("no return value specified for ProcessPipelineHook")
	}

	var r0 redis.ProcessPipelineHook
	if rf, ok := ret.Get(0).(func(redis.ProcessPipelineHook) redis.ProcessPipelineHook); ok {
		r0 = rf(next)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(redis.ProcessPipelineHook)
		}
	}

	return r0
}

// MockHook_ProcessPipelineHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessPipelineHook'
type MockHook_ProcessPipelineHook_Call struct {
	*mock.Call
}

// ProcessPipelineHook is a helper method to define mock.On call
//   - next redis.ProcessPipelineHook
func (_e *MockHook_Expecter) ProcessPipelineHook(next interface{}) *MockHook_ProcessPipelineHook_Call {
	return &MockHook_ProcessPipelineHook_Call{Call: _e.mock.On("ProcessPipelineHook", next)}
}

func (_c *MockHook_ProcessPipelineHook_Call) Run(run func(next redis.ProcessPipelineHook)) *MockHook_ProcessPipelineHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(redis.ProcessPipelineHook))
	})
	return _c
}

func (_c *MockHook_ProcessPipelineHook_Call) Return(_a0 redis.ProcessPipelineHook) *MockHook_ProcessPipelineHook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHook_ProcessPipelineHook_Call) RunAndReturn(run func(redis.ProcessPipelineHook) redis.ProcessPipelineHook) *MockHook_ProcessPipelineHook_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHook creates a new instance of MockHook. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHook(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHook {
	mock := &MockHook{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
