// Code generated by mockery. DO NOT EDIT.

package httpclient

import mock "github.com/stretchr/testify/mock"

// MockClientOption is an autogenerated mock type for the ClientOption type
type MockClientOption struct {
	mock.Mock
}

type MockClientOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientOption) EXPECT() *MockClientOption_Expecter {
	return &MockClientOption_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: c
func (_m *MockClientOption) Execute(c *Client) {
	_m.Called(c)
}

// MockClientOption_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockClientOption_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - c *Client
func (_e *MockClientOption_Expecter) Execute(c interface{}) *MockClientOption_Execute_Call {
	return &MockClientOption_Execute_Call{Call: _e.mock.On("Execute", c)}
}

func (_c *MockClientOption_Execute_Call) Run(run func(c *Client)) *MockClientOption_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Client))
	})
	return _c
}

func (_c *MockClientOption_Execute_Call) Return() *MockClientOption_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientOption_Execute_Call) RunAndReturn(run func(*Client)) *MockClientOption_Execute_Call {
	_c.Run(run)
	return _c
}

// NewMockClientOption creates a new instance of MockClientOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientOption {
	mock := &MockClientOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
