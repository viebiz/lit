// Code generated by mockery v2.53.0. DO NOT EDIT.

package httpclient

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockPoolOption is an autogenerated mock type for the PoolOption type
type MockPoolOption struct {
	mock.Mock
}

type MockPoolOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPoolOption) EXPECT() *MockPoolOption_Expecter {
	return &MockPoolOption_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: c, t
func (_m *MockPoolOption) Execute(c *http.Client, t *http.Transport) {
	_m.Called(c, t)
}

// MockPoolOption_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockPoolOption_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - c *http.Client
//   - t *http.Transport
func (_e *MockPoolOption_Expecter) Execute(c interface{}, t interface{}) *MockPoolOption_Execute_Call {
	return &MockPoolOption_Execute_Call{Call: _e.mock.On("Execute", c, t)}
}

func (_c *MockPoolOption_Execute_Call) Run(run func(c *http.Client, t *http.Transport)) *MockPoolOption_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Client), args[1].(*http.Transport))
	})
	return _c
}

func (_c *MockPoolOption_Execute_Call) Return() *MockPoolOption_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPoolOption_Execute_Call) RunAndReturn(run func(*http.Client, *http.Transport)) *MockPoolOption_Execute_Call {
	_c.Run(run)
	return _c
}

// NewMockPoolOption creates a new instance of MockPoolOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPoolOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPoolOption {
	mock := &MockPoolOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
