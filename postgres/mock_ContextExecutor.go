// Code generated by mockery v2.53.0. DO NOT EDIT.

package postgres

import (
	context "context"
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"
)

// MockContextExecutor is an autogenerated mock type for the ContextExecutor type
type MockContextExecutor struct {
	mock.Mock
}

type MockContextExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContextExecutor) EXPECT() *MockContextExecutor_Expecter {
	return &MockContextExecutor_Expecter{mock: &_m.Mock}
}

// Exec provides a mock function with given fields: query, args
func (_m *MockContextExecutor) Exec(query string, args ...interface{}) (sql.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 sql.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) (sql.Result, error)); ok {
		return rf(query, args...)
	}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) sql.Result); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContextExecutor_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockContextExecutor_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - query string
//   - args ...interface{}
func (_e *MockContextExecutor_Expecter) Exec(query interface{}, args ...interface{}) *MockContextExecutor_Exec_Call {
	return &MockContextExecutor_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{query}, args...)...)}
}

func (_c *MockContextExecutor_Exec_Call) Run(run func(query string, args ...interface{})) *MockContextExecutor_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockContextExecutor_Exec_Call) Return(_a0 sql.Result, _a1 error) *MockContextExecutor_Exec_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContextExecutor_Exec_Call) RunAndReturn(run func(string, ...interface{}) (sql.Result, error)) *MockContextExecutor_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// ExecContext provides a mock function with given fields: ctx, query, args
func (_m *MockContextExecutor) ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecContext")
	}

	var r0 sql.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (sql.Result, error)); ok {
		return rf(ctx, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) sql.Result); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContextExecutor_ExecContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecContext'
type MockContextExecutor_ExecContext_Call struct {
	*mock.Call
}

// ExecContext is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *MockContextExecutor_Expecter) ExecContext(ctx interface{}, query interface{}, args ...interface{}) *MockContextExecutor_ExecContext_Call {
	return &MockContextExecutor_ExecContext_Call{Call: _e.mock.On("ExecContext",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *MockContextExecutor_ExecContext_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *MockContextExecutor_ExecContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockContextExecutor_ExecContext_Call) Return(_a0 sql.Result, _a1 error) *MockContextExecutor_ExecContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContextExecutor_ExecContext_Call) RunAndReturn(run func(context.Context, string, ...interface{}) (sql.Result, error)) *MockContextExecutor_ExecContext_Call {
	_c.Call.Return(run)
	return _c
}

// Prepare provides a mock function with given fields: query
func (_m *MockContextExecutor) Prepare(query string) (*sql.Stmt, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for Prepare")
	}

	var r0 *sql.Stmt
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*sql.Stmt, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(string) *sql.Stmt); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Stmt)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContextExecutor_Prepare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Prepare'
type MockContextExecutor_Prepare_Call struct {
	*mock.Call
}

// Prepare is a helper method to define mock.On call
//   - query string
func (_e *MockContextExecutor_Expecter) Prepare(query interface{}) *MockContextExecutor_Prepare_Call {
	return &MockContextExecutor_Prepare_Call{Call: _e.mock.On("Prepare", query)}
}

func (_c *MockContextExecutor_Prepare_Call) Run(run func(query string)) *MockContextExecutor_Prepare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContextExecutor_Prepare_Call) Return(_a0 *sql.Stmt, _a1 error) *MockContextExecutor_Prepare_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContextExecutor_Prepare_Call) RunAndReturn(run func(string) (*sql.Stmt, error)) *MockContextExecutor_Prepare_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareContext provides a mock function with given fields: ctx, query
func (_m *MockContextExecutor) PrepareContext(ctx context.Context, query string) (*sql.Stmt, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for PrepareContext")
	}

	var r0 *sql.Stmt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sql.Stmt, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sql.Stmt); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Stmt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContextExecutor_PrepareContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareContext'
type MockContextExecutor_PrepareContext_Call struct {
	*mock.Call
}

// PrepareContext is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
func (_e *MockContextExecutor_Expecter) PrepareContext(ctx interface{}, query interface{}) *MockContextExecutor_PrepareContext_Call {
	return &MockContextExecutor_PrepareContext_Call{Call: _e.mock.On("PrepareContext", ctx, query)}
}

func (_c *MockContextExecutor_PrepareContext_Call) Run(run func(ctx context.Context, query string)) *MockContextExecutor_PrepareContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockContextExecutor_PrepareContext_Call) Return(_a0 *sql.Stmt, _a1 error) *MockContextExecutor_PrepareContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContextExecutor_PrepareContext_Call) RunAndReturn(run func(context.Context, string) (*sql.Stmt, error)) *MockContextExecutor_PrepareContext_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: query, args
func (_m *MockContextExecutor) Query(query string, args ...interface{}) (*sql.Rows, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 *sql.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) (*sql.Rows, error)); ok {
		return rf(query, args...)
	}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) *sql.Rows); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContextExecutor_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockContextExecutor_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - query string
//   - args ...interface{}
func (_e *MockContextExecutor_Expecter) Query(query interface{}, args ...interface{}) *MockContextExecutor_Query_Call {
	return &MockContextExecutor_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{query}, args...)...)}
}

func (_c *MockContextExecutor_Query_Call) Run(run func(query string, args ...interface{})) *MockContextExecutor_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockContextExecutor_Query_Call) Return(_a0 *sql.Rows, _a1 error) *MockContextExecutor_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContextExecutor_Query_Call) RunAndReturn(run func(string, ...interface{}) (*sql.Rows, error)) *MockContextExecutor_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryContext provides a mock function with given fields: ctx, query, args
func (_m *MockContextExecutor) QueryContext(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryContext")
	}

	var r0 *sql.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (*sql.Rows, error)); ok {
		return rf(ctx, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *sql.Rows); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContextExecutor_QueryContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryContext'
type MockContextExecutor_QueryContext_Call struct {
	*mock.Call
}

// QueryContext is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *MockContextExecutor_Expecter) QueryContext(ctx interface{}, query interface{}, args ...interface{}) *MockContextExecutor_QueryContext_Call {
	return &MockContextExecutor_QueryContext_Call{Call: _e.mock.On("QueryContext",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *MockContextExecutor_QueryContext_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *MockContextExecutor_QueryContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockContextExecutor_QueryContext_Call) Return(_a0 *sql.Rows, _a1 error) *MockContextExecutor_QueryContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContextExecutor_QueryContext_Call) RunAndReturn(run func(context.Context, string, ...interface{}) (*sql.Rows, error)) *MockContextExecutor_QueryContext_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRow provides a mock function with given fields: query, args
func (_m *MockContextExecutor) QueryRow(query string, args ...interface{}) *sql.Row {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryRow")
	}

	var r0 *sql.Row
	if rf, ok := ret.Get(0).(func(string, ...interface{}) *sql.Row); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Row)
		}
	}

	return r0
}

// MockContextExecutor_QueryRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRow'
type MockContextExecutor_QueryRow_Call struct {
	*mock.Call
}

// QueryRow is a helper method to define mock.On call
//   - query string
//   - args ...interface{}
func (_e *MockContextExecutor_Expecter) QueryRow(query interface{}, args ...interface{}) *MockContextExecutor_QueryRow_Call {
	return &MockContextExecutor_QueryRow_Call{Call: _e.mock.On("QueryRow",
		append([]interface{}{query}, args...)...)}
}

func (_c *MockContextExecutor_QueryRow_Call) Run(run func(query string, args ...interface{})) *MockContextExecutor_QueryRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockContextExecutor_QueryRow_Call) Return(_a0 *sql.Row) *MockContextExecutor_QueryRow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContextExecutor_QueryRow_Call) RunAndReturn(run func(string, ...interface{}) *sql.Row) *MockContextExecutor_QueryRow_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRowContext provides a mock function with given fields: ctx, query, args
func (_m *MockContextExecutor) QueryRowContext(ctx context.Context, query string, args ...interface{}) *sql.Row {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryRowContext")
	}

	var r0 *sql.Row
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *sql.Row); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Row)
		}
	}

	return r0
}

// MockContextExecutor_QueryRowContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRowContext'
type MockContextExecutor_QueryRowContext_Call struct {
	*mock.Call
}

// QueryRowContext is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *MockContextExecutor_Expecter) QueryRowContext(ctx interface{}, query interface{}, args ...interface{}) *MockContextExecutor_QueryRowContext_Call {
	return &MockContextExecutor_QueryRowContext_Call{Call: _e.mock.On("QueryRowContext",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *MockContextExecutor_QueryRowContext_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *MockContextExecutor_QueryRowContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockContextExecutor_QueryRowContext_Call) Return(_a0 *sql.Row) *MockContextExecutor_QueryRowContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContextExecutor_QueryRowContext_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *sql.Row) *MockContextExecutor_QueryRowContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockContextExecutor creates a new instance of MockContextExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContextExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContextExecutor {
	mock := &MockContextExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
