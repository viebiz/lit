// Code generated by mockery v2.49.1. DO NOT EDIT.

package postgres

import (
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"
)

// MockBeginner is an autogenerated mock type for the Beginner type
type MockBeginner struct {
	mock.Mock
}

// Begin provides a mock function with given fields:
func (_m *MockBeginner) Begin() (*sql.Tx, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 *sql.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func() (*sql.Tx, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *sql.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockBeginner creates a new instance of MockBeginner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBeginner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBeginner {
	mock := &MockBeginner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
