// Code generated by mockery v2.53.0. DO NOT EDIT.

package lit

import mock "github.com/stretchr/testify/mock"

// MockHandlerFunc is an autogenerated mock type for the HandlerFunc type
type MockHandlerFunc struct {
	mock.Mock
}

type MockHandlerFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandlerFunc) EXPECT() *MockHandlerFunc_Expecter {
	return &MockHandlerFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx
func (_m *MockHandlerFunc) Execute(ctx Context) {
	_m.Called(ctx)
}

// MockHandlerFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockHandlerFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx Context
func (_e *MockHandlerFunc_Expecter) Execute(ctx interface{}) *MockHandlerFunc_Execute_Call {
	return &MockHandlerFunc_Execute_Call{Call: _e.mock.On("Execute", ctx)}
}

func (_c *MockHandlerFunc_Execute_Call) Run(run func(ctx Context)) *MockHandlerFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Context))
	})
	return _c
}

func (_c *MockHandlerFunc_Execute_Call) Return() *MockHandlerFunc_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandlerFunc_Execute_Call) RunAndReturn(run func(Context)) *MockHandlerFunc_Execute_Call {
	_c.Run(run)
	return _c
}

// NewMockHandlerFunc creates a new instance of MockHandlerFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandlerFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandlerFunc {
	mock := &MockHandlerFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
