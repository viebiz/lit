// Code generated by mockery. DO NOT EDIT.

package lit

import mock "github.com/stretchr/testify/mock"

// MockRouter is an autogenerated mock type for the Router type
type MockRouter struct {
	mock.Mock
}

type MockRouter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRouter) EXPECT() *MockRouter_Expecter {
	return &MockRouter_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: relativePath, handler
func (_m *MockRouter) Delete(relativePath string, handler ErrHandlerFunc) {
	_m.Called(relativePath, handler)
}

// MockRouter_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRouter_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - relativePath string
//   - handler ErrHandlerFunc
func (_e *MockRouter_Expecter) Delete(relativePath interface{}, handler interface{}) *MockRouter_Delete_Call {
	return &MockRouter_Delete_Call{Call: _e.mock.On("Delete", relativePath, handler)}
}

func (_c *MockRouter_Delete_Call) Run(run func(relativePath string, handler ErrHandlerFunc)) *MockRouter_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(ErrHandlerFunc))
	})
	return _c
}

func (_c *MockRouter_Delete_Call) Return() *MockRouter_Delete_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRouter_Delete_Call) RunAndReturn(run func(string, ErrHandlerFunc)) *MockRouter_Delete_Call {
	_c.Run(run)
	return _c
}

// Get provides a mock function with given fields: relativePath, handler
func (_m *MockRouter) Get(relativePath string, handler ErrHandlerFunc) {
	_m.Called(relativePath, handler)
}

// MockRouter_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRouter_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - relativePath string
//   - handler ErrHandlerFunc
func (_e *MockRouter_Expecter) Get(relativePath interface{}, handler interface{}) *MockRouter_Get_Call {
	return &MockRouter_Get_Call{Call: _e.mock.On("Get", relativePath, handler)}
}

func (_c *MockRouter_Get_Call) Run(run func(relativePath string, handler ErrHandlerFunc)) *MockRouter_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(ErrHandlerFunc))
	})
	return _c
}

func (_c *MockRouter_Get_Call) Return() *MockRouter_Get_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRouter_Get_Call) RunAndReturn(run func(string, ErrHandlerFunc)) *MockRouter_Get_Call {
	_c.Run(run)
	return _c
}

// Group provides a mock function with given fields: relativePath, routerFunc
func (_m *MockRouter) Group(relativePath string, routerFunc func(Router)) {
	_m.Called(relativePath, routerFunc)
}

// MockRouter_Group_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Group'
type MockRouter_Group_Call struct {
	*mock.Call
}

// Group is a helper method to define mock.On call
//   - relativePath string
//   - routerFunc func(Router)
func (_e *MockRouter_Expecter) Group(relativePath interface{}, routerFunc interface{}) *MockRouter_Group_Call {
	return &MockRouter_Group_Call{Call: _e.mock.On("Group", relativePath, routerFunc)}
}

func (_c *MockRouter_Group_Call) Run(run func(relativePath string, routerFunc func(Router))) *MockRouter_Group_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func(Router)))
	})
	return _c
}

func (_c *MockRouter_Group_Call) Return() *MockRouter_Group_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRouter_Group_Call) RunAndReturn(run func(string, func(Router))) *MockRouter_Group_Call {
	_c.Run(run)
	return _c
}

// Handle provides a mock function with given fields: method, relativePath, handler
func (_m *MockRouter) Handle(method string, relativePath string, handler HandlerFunc) {
	_m.Called(method, relativePath, handler)
}

// MockRouter_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockRouter_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - method string
//   - relativePath string
//   - handler HandlerFunc
func (_e *MockRouter_Expecter) Handle(method interface{}, relativePath interface{}, handler interface{}) *MockRouter_Handle_Call {
	return &MockRouter_Handle_Call{Call: _e.mock.On("Handle", method, relativePath, handler)}
}

func (_c *MockRouter_Handle_Call) Run(run func(method string, relativePath string, handler HandlerFunc)) *MockRouter_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(HandlerFunc))
	})
	return _c
}

func (_c *MockRouter_Handle_Call) Return() *MockRouter_Handle_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRouter_Handle_Call) RunAndReturn(run func(string, string, HandlerFunc)) *MockRouter_Handle_Call {
	_c.Run(run)
	return _c
}

// HandleWithErr provides a mock function with given fields: method, relativePath, handler
func (_m *MockRouter) HandleWithErr(method string, relativePath string, handler ErrHandlerFunc) {
	_m.Called(method, relativePath, handler)
}

// MockRouter_HandleWithErr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleWithErr'
type MockRouter_HandleWithErr_Call struct {
	*mock.Call
}

// HandleWithErr is a helper method to define mock.On call
//   - method string
//   - relativePath string
//   - handler ErrHandlerFunc
func (_e *MockRouter_Expecter) HandleWithErr(method interface{}, relativePath interface{}, handler interface{}) *MockRouter_HandleWithErr_Call {
	return &MockRouter_HandleWithErr_Call{Call: _e.mock.On("HandleWithErr", method, relativePath, handler)}
}

func (_c *MockRouter_HandleWithErr_Call) Run(run func(method string, relativePath string, handler ErrHandlerFunc)) *MockRouter_HandleWithErr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(ErrHandlerFunc))
	})
	return _c
}

func (_c *MockRouter_HandleWithErr_Call) Return() *MockRouter_HandleWithErr_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRouter_HandleWithErr_Call) RunAndReturn(run func(string, string, ErrHandlerFunc)) *MockRouter_HandleWithErr_Call {
	_c.Run(run)
	return _c
}

// Patch provides a mock function with given fields: relativePath, handler
func (_m *MockRouter) Patch(relativePath string, handler ErrHandlerFunc) {
	_m.Called(relativePath, handler)
}

// MockRouter_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type MockRouter_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - relativePath string
//   - handler ErrHandlerFunc
func (_e *MockRouter_Expecter) Patch(relativePath interface{}, handler interface{}) *MockRouter_Patch_Call {
	return &MockRouter_Patch_Call{Call: _e.mock.On("Patch", relativePath, handler)}
}

func (_c *MockRouter_Patch_Call) Run(run func(relativePath string, handler ErrHandlerFunc)) *MockRouter_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(ErrHandlerFunc))
	})
	return _c
}

func (_c *MockRouter_Patch_Call) Return() *MockRouter_Patch_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRouter_Patch_Call) RunAndReturn(run func(string, ErrHandlerFunc)) *MockRouter_Patch_Call {
	_c.Run(run)
	return _c
}

// Post provides a mock function with given fields: relativePath, handler
func (_m *MockRouter) Post(relativePath string, handler ErrHandlerFunc) {
	_m.Called(relativePath, handler)
}

// MockRouter_Post_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Post'
type MockRouter_Post_Call struct {
	*mock.Call
}

// Post is a helper method to define mock.On call
//   - relativePath string
//   - handler ErrHandlerFunc
func (_e *MockRouter_Expecter) Post(relativePath interface{}, handler interface{}) *MockRouter_Post_Call {
	return &MockRouter_Post_Call{Call: _e.mock.On("Post", relativePath, handler)}
}

func (_c *MockRouter_Post_Call) Run(run func(relativePath string, handler ErrHandlerFunc)) *MockRouter_Post_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(ErrHandlerFunc))
	})
	return _c
}

func (_c *MockRouter_Post_Call) Return() *MockRouter_Post_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRouter_Post_Call) RunAndReturn(run func(string, ErrHandlerFunc)) *MockRouter_Post_Call {
	_c.Run(run)
	return _c
}

// Put provides a mock function with given fields: relativePath, handler
func (_m *MockRouter) Put(relativePath string, handler ErrHandlerFunc) {
	_m.Called(relativePath, handler)
}

// MockRouter_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockRouter_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - relativePath string
//   - handler ErrHandlerFunc
func (_e *MockRouter_Expecter) Put(relativePath interface{}, handler interface{}) *MockRouter_Put_Call {
	return &MockRouter_Put_Call{Call: _e.mock.On("Put", relativePath, handler)}
}

func (_c *MockRouter_Put_Call) Run(run func(relativePath string, handler ErrHandlerFunc)) *MockRouter_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(ErrHandlerFunc))
	})
	return _c
}

func (_c *MockRouter_Put_Call) Return() *MockRouter_Put_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRouter_Put_Call) RunAndReturn(run func(string, ErrHandlerFunc)) *MockRouter_Put_Call {
	_c.Run(run)
	return _c
}

// Use provides a mock function with given fields: middleware
func (_m *MockRouter) Use(middleware ...func(Context)) {
	_va := make([]interface{}, len(middleware))
	for _i := range middleware {
		_va[_i] = middleware[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockRouter_Use_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Use'
type MockRouter_Use_Call struct {
	*mock.Call
}

// Use is a helper method to define mock.On call
//   - middleware ...func(Context)
func (_e *MockRouter_Expecter) Use(middleware ...interface{}) *MockRouter_Use_Call {
	return &MockRouter_Use_Call{Call: _e.mock.On("Use",
		append([]interface{}{}, middleware...)...)}
}

func (_c *MockRouter_Use_Call) Run(run func(middleware ...func(Context))) *MockRouter_Use_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(Context), len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(func(Context))
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockRouter_Use_Call) Return() *MockRouter_Use_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRouter_Use_Call) RunAndReturn(run func(...func(Context))) *MockRouter_Use_Call {
	_c.Run(run)
	return _c
}

// NewMockRouter creates a new instance of MockRouter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRouter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRouter {
	mock := &MockRouter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
