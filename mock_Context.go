// Code generated by mockery v2.53.0. DO NOT EDIT.

package lit

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"

	time "time"
)

// MockContext is an autogenerated mock type for the Context type
type MockContext struct {
	mock.Mock
}

type MockContext_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContext) EXPECT() *MockContext_Expecter {
	return &MockContext_Expecter{mock: &_m.Mock}
}

// AbortWithError provides a mock function with given fields: err
func (_m *MockContext) AbortWithError(err error) {
	_m.Called(err)
}

// MockContext_AbortWithError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AbortWithError'
type MockContext_AbortWithError_Call struct {
	*mock.Call
}

// AbortWithError is a helper method to define mock.On call
//   - err error
func (_e *MockContext_Expecter) AbortWithError(err interface{}) *MockContext_AbortWithError_Call {
	return &MockContext_AbortWithError_Call{Call: _e.mock.On("AbortWithError", err)}
}

func (_c *MockContext_AbortWithError_Call) Run(run func(err error)) *MockContext_AbortWithError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockContext_AbortWithError_Call) Return() *MockContext_AbortWithError_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContext_AbortWithError_Call) RunAndReturn(run func(error)) *MockContext_AbortWithError_Call {
	_c.Run(run)
	return _c
}

// Bind provides a mock function with given fields: obj
func (_m *MockContext) Bind(obj interface{}) error {
	ret := _m.Called(obj)

	if len(ret) == 0 {
		panic("no return value specified for Bind")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContext_Bind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bind'
type MockContext_Bind_Call struct {
	*mock.Call
}

// Bind is a helper method to define mock.On call
//   - obj interface{}
func (_e *MockContext_Expecter) Bind(obj interface{}) *MockContext_Bind_Call {
	return &MockContext_Bind_Call{Call: _e.mock.On("Bind", obj)}
}

func (_c *MockContext_Bind_Call) Run(run func(obj interface{})) *MockContext_Bind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockContext_Bind_Call) Return(_a0 error) *MockContext_Bind_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_Bind_Call) RunAndReturn(run func(interface{}) error) *MockContext_Bind_Call {
	_c.Call.Return(run)
	return _c
}

// Deadline provides a mock function with no fields
func (_m *MockContext) Deadline() (time.Time, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Deadline")
	}

	var r0 time.Time
	var r1 bool
	if rf, ok := ret.Get(0).(func() (time.Time, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockContext_Deadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deadline'
type MockContext_Deadline_Call struct {
	*mock.Call
}

// Deadline is a helper method to define mock.On call
func (_e *MockContext_Expecter) Deadline() *MockContext_Deadline_Call {
	return &MockContext_Deadline_Call{Call: _e.mock.On("Deadline")}
}

func (_c *MockContext_Deadline_Call) Run(run func()) *MockContext_Deadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContext_Deadline_Call) Return(deadline time.Time, ok bool) *MockContext_Deadline_Call {
	_c.Call.Return(deadline, ok)
	return _c
}

func (_c *MockContext_Deadline_Call) RunAndReturn(run func() (time.Time, bool)) *MockContext_Deadline_Call {
	_c.Call.Return(run)
	return _c
}

// Done provides a mock function with no fields
func (_m *MockContext) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockContext_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockContext_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockContext_Expecter) Done() *MockContext_Done_Call {
	return &MockContext_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockContext_Done_Call) Run(run func()) *MockContext_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContext_Done_Call) Return(_a0 <-chan struct{}) *MockContext_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockContext_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Err provides a mock function with no fields
func (_m *MockContext) Err() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContext_Err_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Err'
type MockContext_Err_Call struct {
	*mock.Call
}

// Err is a helper method to define mock.On call
func (_e *MockContext_Expecter) Err() *MockContext_Err_Call {
	return &MockContext_Err_Call{Call: _e.mock.On("Err")}
}

func (_c *MockContext_Err_Call) Run(run func()) *MockContext_Err_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContext_Err_Call) Return(_a0 error) *MockContext_Err_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_Err_Call) RunAndReturn(run func() error) *MockContext_Err_Call {
	_c.Call.Return(run)
	return _c
}

// FormFile provides a mock function with given fields: name
func (_m *MockContext) FormFile(name string) (*multipart.FileHeader, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for FormFile")
	}

	var r0 *multipart.FileHeader
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*multipart.FileHeader, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *multipart.FileHeader); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*multipart.FileHeader)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContext_FormFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FormFile'
type MockContext_FormFile_Call struct {
	*mock.Call
}

// FormFile is a helper method to define mock.On call
//   - name string
func (_e *MockContext_Expecter) FormFile(name interface{}) *MockContext_FormFile_Call {
	return &MockContext_FormFile_Call{Call: _e.mock.On("FormFile", name)}
}

func (_c *MockContext_FormFile_Call) Run(run func(name string)) *MockContext_FormFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContext_FormFile_Call) Return(_a0 *multipart.FileHeader, _a1 error) *MockContext_FormFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContext_FormFile_Call) RunAndReturn(run func(string) (*multipart.FileHeader, error)) *MockContext_FormFile_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *MockContext) Get(key string) (any, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 any
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (any, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) any); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockContext_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockContext_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *MockContext_Expecter) Get(key interface{}) *MockContext_Get_Call {
	return &MockContext_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockContext_Get_Call) Run(run func(key string)) *MockContext_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContext_Get_Call) Return(value any, exists bool) *MockContext_Get_Call {
	_c.Call.Return(value, exists)
	return _c
}

func (_c *MockContext_Get_Call) RunAndReturn(run func(string) (any, bool)) *MockContext_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Header provides a mock function with given fields: key, value
func (_m *MockContext) Header(key string, value string) {
	_m.Called(key, value)
}

// MockContext_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type MockContext_Header_Call struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
//   - key string
//   - value string
func (_e *MockContext_Expecter) Header(key interface{}, value interface{}) *MockContext_Header_Call {
	return &MockContext_Header_Call{Call: _e.mock.On("Header", key, value)}
}

func (_c *MockContext_Header_Call) Run(run func(key string, value string)) *MockContext_Header_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockContext_Header_Call) Return() *MockContext_Header_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContext_Header_Call) RunAndReturn(run func(string, string)) *MockContext_Header_Call {
	_c.Run(run)
	return _c
}

// JSON provides a mock function with given fields: code, obj
func (_m *MockContext) JSON(code int, obj any) {
	_m.Called(code, obj)
}

// MockContext_JSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSON'
type MockContext_JSON_Call struct {
	*mock.Call
}

// JSON is a helper method to define mock.On call
//   - code int
//   - obj any
func (_e *MockContext_Expecter) JSON(code interface{}, obj interface{}) *MockContext_JSON_Call {
	return &MockContext_JSON_Call{Call: _e.mock.On("JSON", code, obj)}
}

func (_c *MockContext_JSON_Call) Run(run func(code int, obj any)) *MockContext_JSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(any))
	})
	return _c
}

func (_c *MockContext_JSON_Call) Return() *MockContext_JSON_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContext_JSON_Call) RunAndReturn(run func(int, any)) *MockContext_JSON_Call {
	_c.Run(run)
	return _c
}

// MultipartForm provides a mock function with no fields
func (_m *MockContext) MultipartForm() (*multipart.Form, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MultipartForm")
	}

	var r0 *multipart.Form
	var r1 error
	if rf, ok := ret.Get(0).(func() (*multipart.Form, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *multipart.Form); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*multipart.Form)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContext_MultipartForm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MultipartForm'
type MockContext_MultipartForm_Call struct {
	*mock.Call
}

// MultipartForm is a helper method to define mock.On call
func (_e *MockContext_Expecter) MultipartForm() *MockContext_MultipartForm_Call {
	return &MockContext_MultipartForm_Call{Call: _e.mock.On("MultipartForm")}
}

func (_c *MockContext_MultipartForm_Call) Run(run func()) *MockContext_MultipartForm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContext_MultipartForm_Call) Return(_a0 *multipart.Form, _a1 error) *MockContext_MultipartForm_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContext_MultipartForm_Call) RunAndReturn(run func() (*multipart.Form, error)) *MockContext_MultipartForm_Call {
	_c.Call.Return(run)
	return _c
}

// Next provides a mock function with no fields
func (_m *MockContext) Next() {
	_m.Called()
}

// MockContext_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type MockContext_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
func (_e *MockContext_Expecter) Next() *MockContext_Next_Call {
	return &MockContext_Next_Call{Call: _e.mock.On("Next")}
}

func (_c *MockContext_Next_Call) Run(run func()) *MockContext_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContext_Next_Call) Return() *MockContext_Next_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContext_Next_Call) RunAndReturn(run func()) *MockContext_Next_Call {
	_c.Run(run)
	return _c
}

// ProtoBuf provides a mock function with given fields: code, obj
func (_m *MockContext) ProtoBuf(code int, obj any) {
	_m.Called(code, obj)
}

// MockContext_ProtoBuf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProtoBuf'
type MockContext_ProtoBuf_Call struct {
	*mock.Call
}

// ProtoBuf is a helper method to define mock.On call
//   - code int
//   - obj any
func (_e *MockContext_Expecter) ProtoBuf(code interface{}, obj interface{}) *MockContext_ProtoBuf_Call {
	return &MockContext_ProtoBuf_Call{Call: _e.mock.On("ProtoBuf", code, obj)}
}

func (_c *MockContext_ProtoBuf_Call) Run(run func(code int, obj any)) *MockContext_ProtoBuf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(any))
	})
	return _c
}

func (_c *MockContext_ProtoBuf_Call) Return() *MockContext_ProtoBuf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContext_ProtoBuf_Call) RunAndReturn(run func(int, any)) *MockContext_ProtoBuf_Call {
	_c.Run(run)
	return _c
}

// Request provides a mock function with no fields
func (_m *MockContext) Request() *http.Request {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Request")
	}

	var r0 *http.Request
	if rf, ok := ret.Get(0).(func() *http.Request); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}

	return r0
}

// MockContext_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type MockContext_Request_Call struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
func (_e *MockContext_Expecter) Request() *MockContext_Request_Call {
	return &MockContext_Request_Call{Call: _e.mock.On("Request")}
}

func (_c *MockContext_Request_Call) Run(run func()) *MockContext_Request_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContext_Request_Call) Return(_a0 *http.Request) *MockContext_Request_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_Request_Call) RunAndReturn(run func() *http.Request) *MockContext_Request_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: key, value
func (_m *MockContext) Set(key string, value any) {
	_m.Called(key, value)
}

// MockContext_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockContext_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key string
//   - value any
func (_e *MockContext_Expecter) Set(key interface{}, value interface{}) *MockContext_Set_Call {
	return &MockContext_Set_Call{Call: _e.mock.On("Set", key, value)}
}

func (_c *MockContext_Set_Call) Run(run func(key string, value any)) *MockContext_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(any))
	})
	return _c
}

func (_c *MockContext_Set_Call) Return() *MockContext_Set_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContext_Set_Call) RunAndReturn(run func(string, any)) *MockContext_Set_Call {
	_c.Run(run)
	return _c
}

// SetRequest provides a mock function with given fields: _a0
func (_m *MockContext) SetRequest(_a0 *http.Request) {
	_m.Called(_a0)
}

// MockContext_SetRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRequest'
type MockContext_SetRequest_Call struct {
	*mock.Call
}

// SetRequest is a helper method to define mock.On call
//   - _a0 *http.Request
func (_e *MockContext_Expecter) SetRequest(_a0 interface{}) *MockContext_SetRequest_Call {
	return &MockContext_SetRequest_Call{Call: _e.mock.On("SetRequest", _a0)}
}

func (_c *MockContext_SetRequest_Call) Run(run func(_a0 *http.Request)) *MockContext_SetRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *MockContext_SetRequest_Call) Return() *MockContext_SetRequest_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContext_SetRequest_Call) RunAndReturn(run func(*http.Request)) *MockContext_SetRequest_Call {
	_c.Run(run)
	return _c
}

// SetRequestContext provides a mock function with given fields: ctx
func (_m *MockContext) SetRequestContext(ctx context.Context) *http.Request {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SetRequestContext")
	}

	var r0 *http.Request
	if rf, ok := ret.Get(0).(func(context.Context) *http.Request); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}

	return r0
}

// MockContext_SetRequestContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRequestContext'
type MockContext_SetRequestContext_Call struct {
	*mock.Call
}

// SetRequestContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockContext_Expecter) SetRequestContext(ctx interface{}) *MockContext_SetRequestContext_Call {
	return &MockContext_SetRequestContext_Call{Call: _e.mock.On("SetRequestContext", ctx)}
}

func (_c *MockContext_SetRequestContext_Call) Run(run func(ctx context.Context)) *MockContext_SetRequestContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockContext_SetRequestContext_Call) Return(_a0 *http.Request) *MockContext_SetRequestContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_SetRequestContext_Call) RunAndReturn(run func(context.Context) *http.Request) *MockContext_SetRequestContext_Call {
	_c.Call.Return(run)
	return _c
}

// SetWriter provides a mock function with given fields: w
func (_m *MockContext) SetWriter(w ResponseWriter) {
	_m.Called(w)
}

// MockContext_SetWriter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetWriter'
type MockContext_SetWriter_Call struct {
	*mock.Call
}

// SetWriter is a helper method to define mock.On call
//   - w ResponseWriter
func (_e *MockContext_Expecter) SetWriter(w interface{}) *MockContext_SetWriter_Call {
	return &MockContext_SetWriter_Call{Call: _e.mock.On("SetWriter", w)}
}

func (_c *MockContext_SetWriter_Call) Run(run func(w ResponseWriter)) *MockContext_SetWriter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ResponseWriter))
	})
	return _c
}

func (_c *MockContext_SetWriter_Call) Return() *MockContext_SetWriter_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContext_SetWriter_Call) RunAndReturn(run func(ResponseWriter)) *MockContext_SetWriter_Call {
	_c.Run(run)
	return _c
}

// Status provides a mock function with given fields: code
func (_m *MockContext) Status(code int) {
	_m.Called(code)
}

// MockContext_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockContext_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - code int
func (_e *MockContext_Expecter) Status(code interface{}) *MockContext_Status_Call {
	return &MockContext_Status_Call{Call: _e.mock.On("Status", code)}
}

func (_c *MockContext_Status_Call) Run(run func(code int)) *MockContext_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockContext_Status_Call) Return() *MockContext_Status_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContext_Status_Call) RunAndReturn(run func(int)) *MockContext_Status_Call {
	_c.Run(run)
	return _c
}

// Value provides a mock function with given fields: key
func (_m *MockContext) Value(key any) any {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Value")
	}

	var r0 any
	if rf, ok := ret.Get(0).(func(any) any); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	return r0
}

// MockContext_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type MockContext_Value_Call struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
//   - key any
func (_e *MockContext_Expecter) Value(key interface{}) *MockContext_Value_Call {
	return &MockContext_Value_Call{Call: _e.mock.On("Value", key)}
}

func (_c *MockContext_Value_Call) Run(run func(key any)) *MockContext_Value_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any))
	})
	return _c
}

func (_c *MockContext_Value_Call) Return(_a0 any) *MockContext_Value_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_Value_Call) RunAndReturn(run func(any) any) *MockContext_Value_Call {
	_c.Call.Return(run)
	return _c
}

// Writer provides a mock function with no fields
func (_m *MockContext) Writer() ResponseWriter {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Writer")
	}

	var r0 ResponseWriter
	if rf, ok := ret.Get(0).(func() ResponseWriter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ResponseWriter)
		}
	}

	return r0
}

// MockContext_Writer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Writer'
type MockContext_Writer_Call struct {
	*mock.Call
}

// Writer is a helper method to define mock.On call
func (_e *MockContext_Expecter) Writer() *MockContext_Writer_Call {
	return &MockContext_Writer_Call{Call: _e.mock.On("Writer")}
}

func (_c *MockContext_Writer_Call) Run(run func()) *MockContext_Writer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContext_Writer_Call) Return(_a0 ResponseWriter) *MockContext_Writer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_Writer_Call) RunAndReturn(run func() ResponseWriter) *MockContext_Writer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockContext creates a new instance of MockContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContext {
	mock := &MockContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
