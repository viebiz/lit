// Code generated by mockery. DO NOT EDIT.

package jwt

import mock "github.com/stretchr/testify/mock"

// MockSigningMethod is an autogenerated mock type for the SigningMethod type
type MockSigningMethod struct {
	mock.Mock
}

type MockSigningMethod_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSigningMethod) EXPECT() *MockSigningMethod_Expecter {
	return &MockSigningMethod_Expecter{mock: &_m.Mock}
}

// Alg provides a mock function with no fields
func (_m *MockSigningMethod) Alg() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Alg")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSigningMethod_Alg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Alg'
type MockSigningMethod_Alg_Call struct {
	*mock.Call
}

// Alg is a helper method to define mock.On call
func (_e *MockSigningMethod_Expecter) Alg() *MockSigningMethod_Alg_Call {
	return &MockSigningMethod_Alg_Call{Call: _e.mock.On("Alg")}
}

func (_c *MockSigningMethod_Alg_Call) Run(run func()) *MockSigningMethod_Alg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSigningMethod_Alg_Call) Return(_a0 string) *MockSigningMethod_Alg_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSigningMethod_Alg_Call) RunAndReturn(run func() string) *MockSigningMethod_Alg_Call {
	_c.Call.Return(run)
	return _c
}

// Sign provides a mock function with given fields: signingString, key
func (_m *MockSigningMethod) Sign(signingString []byte, key Signer) ([]byte, error) {
	ret := _m.Called(signingString, key)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, Signer) ([]byte, error)); ok {
		return rf(signingString, key)
	}
	if rf, ok := ret.Get(0).(func([]byte, Signer) []byte); ok {
		r0 = rf(signingString, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, Signer) error); ok {
		r1 = rf(signingString, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSigningMethod_Sign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sign'
type MockSigningMethod_Sign_Call struct {
	*mock.Call
}

// Sign is a helper method to define mock.On call
//   - signingString []byte
//   - key Signer
func (_e *MockSigningMethod_Expecter) Sign(signingString interface{}, key interface{}) *MockSigningMethod_Sign_Call {
	return &MockSigningMethod_Sign_Call{Call: _e.mock.On("Sign", signingString, key)}
}

func (_c *MockSigningMethod_Sign_Call) Run(run func(signingString []byte, key Signer)) *MockSigningMethod_Sign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(Signer))
	})
	return _c
}

func (_c *MockSigningMethod_Sign_Call) Return(_a0 []byte, _a1 error) *MockSigningMethod_Sign_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSigningMethod_Sign_Call) RunAndReturn(run func([]byte, Signer) ([]byte, error)) *MockSigningMethod_Sign_Call {
	_c.Call.Return(run)
	return _c
}

// Verify provides a mock function with given fields: signingString, sig, key
func (_m *MockSigningMethod) Verify(signingString []byte, sig []byte, key VerifyKey) error {
	ret := _m.Called(signingString, sig, key)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte, VerifyKey) error); ok {
		r0 = rf(signingString, sig, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSigningMethod_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type MockSigningMethod_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - signingString []byte
//   - sig []byte
//   - key VerifyKey
func (_e *MockSigningMethod_Expecter) Verify(signingString interface{}, sig interface{}, key interface{}) *MockSigningMethod_Verify_Call {
	return &MockSigningMethod_Verify_Call{Call: _e.mock.On("Verify", signingString, sig, key)}
}

func (_c *MockSigningMethod_Verify_Call) Run(run func(signingString []byte, sig []byte, key VerifyKey)) *MockSigningMethod_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].([]byte), args[2].(VerifyKey))
	})
	return _c
}

func (_c *MockSigningMethod_Verify_Call) Return(_a0 error) *MockSigningMethod_Verify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSigningMethod_Verify_Call) RunAndReturn(run func([]byte, []byte, VerifyKey) error) *MockSigningMethod_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSigningMethod creates a new instance of MockSigningMethod. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSigningMethod(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSigningMethod {
	mock := &MockSigningMethod{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
