// Code generated by mockery v2.49.1. DO NOT EDIT.

package jwt

import mock "github.com/stretchr/testify/mock"

// MockSigningMethod is an autogenerated mock type for the SigningMethod type
type MockSigningMethod struct {
	mock.Mock
}

// Alg provides a mock function with given fields:
func (_m *MockSigningMethod) Alg() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Alg")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Sign provides a mock function with given fields: signingString, key
func (_m *MockSigningMethod) Sign(signingString []byte, key Signer) ([]byte, error) {
	ret := _m.Called(signingString, key)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, Signer) ([]byte, error)); ok {
		return rf(signingString, key)
	}
	if rf, ok := ret.Get(0).(func([]byte, Signer) []byte); ok {
		r0 = rf(signingString, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, Signer) error); ok {
		r1 = rf(signingString, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Verify provides a mock function with given fields: signingString, sig, key
func (_m *MockSigningMethod) Verify(signingString []byte, sig []byte, key VerifyKey) error {
	ret := _m.Called(signingString, sig, key)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte, VerifyKey) error); ok {
		r0 = rf(signingString, sig, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockSigningMethod creates a new instance of MockSigningMethod. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSigningMethod(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSigningMethod {
	mock := &MockSigningMethod{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
