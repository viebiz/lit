// Code generated by mockery. DO NOT EDIT.

package jwt

import (
	crypto "crypto"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockSigner is an autogenerated mock type for the Signer type
type MockSigner struct {
	mock.Mock
}

type MockSigner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSigner) EXPECT() *MockSigner_Expecter {
	return &MockSigner_Expecter{mock: &_m.Mock}
}

// Sign provides a mock function with given fields: rand, digest, opts
func (_m *MockSigner) Sign(rand io.Reader, digest []byte, opts crypto.SignerOpts) ([]byte, error) {
	ret := _m.Called(rand, digest, opts)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(io.Reader, []byte, crypto.SignerOpts) ([]byte, error)); ok {
		return rf(rand, digest, opts)
	}
	if rf, ok := ret.Get(0).(func(io.Reader, []byte, crypto.SignerOpts) []byte); ok {
		r0 = rf(rand, digest, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(io.Reader, []byte, crypto.SignerOpts) error); ok {
		r1 = rf(rand, digest, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSigner_Sign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sign'
type MockSigner_Sign_Call struct {
	*mock.Call
}

// Sign is a helper method to define mock.On call
//   - rand io.Reader
//   - digest []byte
//   - opts crypto.SignerOpts
func (_e *MockSigner_Expecter) Sign(rand interface{}, digest interface{}, opts interface{}) *MockSigner_Sign_Call {
	return &MockSigner_Sign_Call{Call: _e.mock.On("Sign", rand, digest, opts)}
}

func (_c *MockSigner_Sign_Call) Run(run func(rand io.Reader, digest []byte, opts crypto.SignerOpts)) *MockSigner_Sign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Reader), args[1].([]byte), args[2].(crypto.SignerOpts))
	})
	return _c
}

func (_c *MockSigner_Sign_Call) Return(signature []byte, err error) *MockSigner_Sign_Call {
	_c.Call.Return(signature, err)
	return _c
}

func (_c *MockSigner_Sign_Call) RunAndReturn(run func(io.Reader, []byte, crypto.SignerOpts) ([]byte, error)) *MockSigner_Sign_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSigner creates a new instance of MockSigner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSigner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSigner {
	mock := &MockSigner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
