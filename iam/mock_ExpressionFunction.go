// Code generated by mockery v2.49.1. DO NOT EDIT.

package iam

import mock "github.com/stretchr/testify/mock"

// MockExpressionFunction is an autogenerated mock type for the ExpressionFunction type
type MockExpressionFunction struct {
	mock.Mock
}

// Execute provides a mock function with given fields: arguments
func (_m *MockExpressionFunction) Execute(arguments ...interface{}) (interface{}, error) {
	var _ca []interface{}
	_ca = append(_ca, arguments...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (interface{}, error)); ok {
		return rf(arguments...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) interface{}); ok {
		r0 = rf(arguments...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(arguments...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockExpressionFunction creates a new instance of MockExpressionFunction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExpressionFunction(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExpressionFunction {
	mock := &MockExpressionFunction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
