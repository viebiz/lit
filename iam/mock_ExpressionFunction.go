// Code generated by mockery. DO NOT EDIT.

package iam

import mock "github.com/stretchr/testify/mock"

// MockExpressionFunction is an autogenerated mock type for the ExpressionFunction type
type MockExpressionFunction struct {
	mock.Mock
}

type MockExpressionFunction_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExpressionFunction) EXPECT() *MockExpressionFunction_Expecter {
	return &MockExpressionFunction_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: arguments
func (_m *MockExpressionFunction) Execute(arguments ...interface{}) (interface{}, error) {
	var _ca []interface{}
	_ca = append(_ca, arguments...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (interface{}, error)); ok {
		return rf(arguments...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) interface{}); ok {
		r0 = rf(arguments...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(arguments...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExpressionFunction_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockExpressionFunction_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - arguments ...interface{}
func (_e *MockExpressionFunction_Expecter) Execute(arguments ...interface{}) *MockExpressionFunction_Execute_Call {
	return &MockExpressionFunction_Execute_Call{Call: _e.mock.On("Execute",
		append([]interface{}{}, arguments...)...)}
}

func (_c *MockExpressionFunction_Execute_Call) Run(run func(arguments ...interface{})) *MockExpressionFunction_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockExpressionFunction_Execute_Call) Return(_a0 interface{}, _a1 error) *MockExpressionFunction_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExpressionFunction_Execute_Call) RunAndReturn(run func(...interface{}) (interface{}, error)) *MockExpressionFunction_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExpressionFunction creates a new instance of MockExpressionFunction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExpressionFunction(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExpressionFunction {
	mock := &MockExpressionFunction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
