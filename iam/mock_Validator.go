// Code generated by mockery v2.49.1. DO NOT EDIT.

package iam

import (
	mock "github.com/stretchr/testify/mock"
	jwt "github.com/viebiz/lit/jwt"
)

// MockValidator is an autogenerated mock type for the Validator type
type MockValidator struct {
	mock.Mock
}

// Validate provides a mock function with given fields: tokenString
func (_m *MockValidator) Validate(tokenString string) (jwt.Token[Claims], error) {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 jwt.Token[Claims]
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (jwt.Token[Claims], error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) jwt.Token[Claims]); ok {
		r0 = rf(tokenString)
	} else {
		r0 = ret.Get(0).(jwt.Token[Claims])
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockValidator creates a new instance of MockValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockValidator {
	mock := &MockValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
