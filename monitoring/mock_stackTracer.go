// Code generated by mockery v2.53.0. DO NOT EDIT.

package monitoring

import (
	errors "github.com/pkg/errors"
	mock "github.com/stretchr/testify/mock"
)

// MockstackTracer is an autogenerated mock type for the stackTracer type
type MockstackTracer struct {
	mock.Mock
}

type MockstackTracer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockstackTracer) EXPECT() *MockstackTracer_Expecter {
	return &MockstackTracer_Expecter{mock: &_m.Mock}
}

// StackTrace provides a mock function with no fields
func (_m *MockstackTracer) StackTrace() errors.StackTrace {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StackTrace")
	}

	var r0 errors.StackTrace
	if rf, ok := ret.Get(0).(func() errors.StackTrace); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.StackTrace)
		}
	}

	return r0
}

// MockstackTracer_StackTrace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StackTrace'
type MockstackTracer_StackTrace_Call struct {
	*mock.Call
}

// StackTrace is a helper method to define mock.On call
func (_e *MockstackTracer_Expecter) StackTrace() *MockstackTracer_StackTrace_Call {
	return &MockstackTracer_StackTrace_Call{Call: _e.mock.On("StackTrace")}
}

func (_c *MockstackTracer_StackTrace_Call) Run(run func()) *MockstackTracer_StackTrace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockstackTracer_StackTrace_Call) Return(_a0 errors.StackTrace) *MockstackTracer_StackTrace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockstackTracer_StackTrace_Call) RunAndReturn(run func() errors.StackTrace) *MockstackTracer_StackTrace_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockstackTracer creates a new instance of MockstackTracer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockstackTracer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockstackTracer {
	mock := &MockstackTracer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
