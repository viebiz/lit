// Code generated by mockery v2.53.0. DO NOT EDIT.

package testutil

import (
	cmp "github.com/google/go-cmp/cmp"
	mock "github.com/stretchr/testify/mock"
)

// MockOption is an autogenerated mock type for the Option type
type MockOption[T any] struct {
	mock.Mock
}

type MockOption_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockOption[T]) EXPECT() *MockOption_Expecter[T] {
	return &MockOption_Expecter[T]{mock: &_m.Mock}
}

// check provides a mock function with given fields: _a0
func (_m *MockOption[T]) check(_a0 T) {
	_m.Called(_a0)
}

// MockOption_check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'check'
type MockOption_check_Call[T any] struct {
	*mock.Call
}

// check is a helper method to define mock.On call
//   - _a0 T
func (_e *MockOption_Expecter[T]) check(_a0 interface{}) *MockOption_check_Call[T] {
	return &MockOption_check_Call[T]{Call: _e.mock.On("check", _a0)}
}

func (_c *MockOption_check_Call[T]) Run(run func(_a0 T)) *MockOption_check_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T))
	})
	return _c
}

func (_c *MockOption_check_Call[T]) Return() *MockOption_check_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *MockOption_check_Call[T]) RunAndReturn(run func(T)) *MockOption_check_Call[T] {
	_c.Run(run)
	return _c
}

// toCmpOption provides a mock function with no fields
func (_m *MockOption[T]) toCmpOption() cmp.Option {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for toCmpOption")
	}

	var r0 cmp.Option
	if rf, ok := ret.Get(0).(func() cmp.Option); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cmp.Option)
		}
	}

	return r0
}

// MockOption_toCmpOption_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'toCmpOption'
type MockOption_toCmpOption_Call[T any] struct {
	*mock.Call
}

// toCmpOption is a helper method to define mock.On call
func (_e *MockOption_Expecter[T]) toCmpOption() *MockOption_toCmpOption_Call[T] {
	return &MockOption_toCmpOption_Call[T]{Call: _e.mock.On("toCmpOption")}
}

func (_c *MockOption_toCmpOption_Call[T]) Run(run func()) *MockOption_toCmpOption_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOption_toCmpOption_Call[T]) Return(_a0 cmp.Option) *MockOption_toCmpOption_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOption_toCmpOption_Call[T]) RunAndReturn(run func() cmp.Option) *MockOption_toCmpOption_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockOption creates a new instance of MockOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOption[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOption[T] {
	mock := &MockOption[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
